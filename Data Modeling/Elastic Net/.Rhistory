knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(glmnet)
housing_data <- read_csv("/Users/chensihan/Documents/GitHub/BIOSTAT625/Data Exploration/final_full_rmna_OneHotEncoded_housing.csv")
set.seed(34)
attach(housing_data)
#transform price into log_price
housing_data$log_price=log(housing_data$`Price (in rupees)`)
X <- housing_data[, -which(names(housing_data) == "Price (in rupees)" | names(housing_data) == "log_price")]
Y <- housing_data$log_price
X_matrix <- as.matrix(X)
Y_matrix <- as.matrix(Y)
# Initialize storage
alphas <- seq(0, 1, by = 0.01)
elastic_net <- list()  # A list to store models
best_lambda <- numeric(length(alphas))  # Numeric vector for best lambda values
predicted_prices <- list()  # A list to store predictions
results <- list()  # A list to store data frames with actual and predicted values
rmse <- numeric(length(alphas))   # Numeric vector for RMSE values
mae <- numeric(length(alphas))   # Numeric vector for MAE values
mape=numeric(length(alphas))  # Numeric vector for MAPE values
for (i in seq_along(alphas)) {
alpha=alphas[i]
# Fit elastic net model with alpha
elastic_net[[i]] <- cv.glmnet(X_matrix, Y_matrix, alpha = alpha)
# Store the best lambda value (we choose lambda where MSE is smallest) #lambda.min
best_lambda[i] <- elastic_net[[i]]$lambda.1se
# Predict on the test set using the best lambda
predicted_prices[[i]] <- predict(elastic_net[[i]], newx = X_matrix, s = "lambda.1se")
# Combine actual and predicted values
results[[i]] <- data.frame(Actual = Y_matrix, Predicted = as.vector(predicted_prices[[i]]))
# Compute RMSE, MAE, MAPE
rmse[i] <- sqrt(mean((results[[i]]$Actual - results[[i]]$Predicted)^2))
mae[i] <- mean(abs(results[[i]]$Actual - results[[i]]$Predicted))
mape[i] <- mean(abs((results[[i]]$Actual - results[[i]]$Predicted) / results[[i]]$Actual)) * 100
}
# Results for RMSE, MAE and MAPE
print(rmse)
which.min(abs(rmse))
print(mae)
which.min(abs(mae))
print(mape)
which.min(abs(mape))
plot(alphas,rmse)
plot(alphas,mape)
plot(alphas, mae)
alphas[6]
fit= cv.glmnet(X_matrix, Y_matrix, alpha = alphas[6])
plot(fit)
# two methods to choose lambda
fit$lambda.1se
fit$lambda.min
# Compute RMSE, MAE, MAPE and R_squared in training dataset
predicted_prices<- predict(fit, newx = X_matrix,s=0.08663284)
# Combine actual and predicted values
results<- data.frame(Actual = Y_matrix, Predicted = as.vector(predicted_prices))
rmse<- sqrt(mean((results$Actual - results$Predicted)^2))
mae<- mean(abs(results$Actual - results$Predicted))
mape<- mean(abs((results$Actual - results$Predicted) / results$Actual)) * 100
rmse
mae
mape
plot(Y_matrix, predicted_prices, xlab = "Actual Prices (natural log)", ylab = "Predicted Prices (natural log)" )
y_mean <- mean(Y_matrix)
SS_total <- sum((Y_matrix - y_mean)^2)
SS_residual <- sum((Y_matrix - predicted_prices)^2)
R_squared <- 1 - (SS_residual / SS_total)
print(R_squared)
# Determine the range of both axes
range_values <- range(c(Y_matrix, predicted_prices))
# Create the plot with the same scale for x and y axes
plot(
Y_matrix, predicted_prices,
xlab = "Actual Prices (natural log)",
ylab = "Predicted Prices (natural log)",
xlim = range_values,
ylim = range_values
)
# Optionally, add a 45-degree line for reference
abline(0, 1, col = "red", lty = 2)  # A red dashed line
# Determine the range of both axes
range_values <- range(c(Y_matrix, predicted_prices))
# Create the plot with the same scale for x and y axes
plot(
Y_matrix, predicted_prices,
xlab = "Actual Prices (natural log)",
ylab = "Predicted Prices (natural log)",
xlim = range_values,
ylim = range_values,
main = "Actual vs Predicted Prices in dataset with all complete cases"
)
# Optionally, add a 45-degree line for reference
abline(0, 1, col = "red", lty = 2)  # A red dashed line
# Determine the range of both axes
range_values <- range(c(Y_matrix, predicted_prices))
# Create the plot with the same scale for x and y axes
plot(
Y_matrix, predicted_prices,
xlab = "Actual Prices (natural log)",
ylab = "Predicted Prices (natural log)",
xlim = range_values,
ylim = range_values,
main = "Actual vs Predicted Prices in dataset(1)"
)
# Optionally, add a 45-degree line for reference
abline(0, 1, col = "red", lty = 2)  # A red dashed line
# Determine the range of both axes
range_values <- range(c(Y_matrix, predicted_prices))
# Create the plot with the same scale for x and y axes
plot(
Y_matrix, predicted_prices,
xlab = "Actual Prices (natural log)",
ylab = "Predicted Prices (natural log)",
xlim = range_values,
ylim = range_values,
main = "Actual vs Predicted Prices in Dataset(1)"
)
# Optionally, add a 45-degree line for reference
abline(0, 1, col = "red", lty = 2)  # A red dashed line
housing_data2 <- read_csv("/Users/chensihan/Documents/GitHub/BIOSTAT625/Data Exploration/final_rmna_OneHotEncoded_housing.csv")
attach(housing_data2)
#transform price into log_price
housing_data2$log_price=log(housing_data2$`Price (in rupees)`)
X <- housing_data2[, -which(names(housing_data2) == "Price (in rupees)" | names(housing_data2) == "log_price")]
Y <- housing_data2$log_price
X_matrix <- as.matrix(X)
Y_matrix <- as.matrix(Y)
# Initialize storage
alphas <- seq(0, 1, by = 0.01)
elastic_net <- list()  # A list to store models
best_lambda <- numeric(length(alphas))  # Numeric vector for best lambda values
predicted_prices <- list()  # A list to store predictions
results <- list()  # A list to store data frames with actual and predicted values
rmse <- numeric(length(alphas))   # Numeric vector for RMSE values
mae <- numeric(length(alphas))   # Numeric vector for MAE values
mape=numeric(length(alphas))  # Numeric vector for MAPE values
for (i in seq_along(alphas)) {
alpha=alphas[i]
# Fit elastic net model with alpha = i/20
elastic_net[[i]] <- cv.glmnet(X_matrix, Y_matrix, alpha = alpha)
# Store the best lambda value (we choose lambda where MSE is smallest) #lambda.min
best_lambda[i] <- elastic_net[[i]]$lambda.1se
# Predict on the test set using the best lambda
predicted_prices[[i]] <- predict(elastic_net[[i]], newx = X_matrix, s = "lambda.1se")
# Combine actual and predicted values
results[[i]] <- data.frame(Actual = Y_matrix, Predicted = as.vector(predicted_prices[[i]]))
# Compute RMSE, MAE, MAPE
rmse[i] <- sqrt(mean((results[[i]]$Actual - results[[i]]$Predicted)^2))
mae[i] <- mean(abs(results[[i]]$Actual - results[[i]]$Predicted))
mape[i] <- mean(abs((results[[i]]$Actual - results[[i]]$Predicted) / results[[i]]$Actual)) * 100
}
# Results for RMSE, MAE and MAPE
print(rmse)
which.min(abs(rmse))
print(mae)
which.min(abs(mae))
print(mape)
which.min(abs(mape))
plot(alphas,rmse)
plot(alphas,mape)
plot(alphas, mae)
fit= cv.glmnet(X_matrix, Y_matrix, alpha = 0.05)
plot(fit)
# two methods to choose lambda
fit$lambda.1se
fit$lambda.min
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(glmnet)
housing_data <- read_csv("/Users/chensihan/Documents/GitHub/BIOSTAT625/Data Exploration/final_full_rmna_OneHotEncoded_housing.csv")
set.seed(34)
attach(housing_data)
#transform price into log_price
housing_data$log_price=log(housing_data$`Price (in rupees)`)
X <- housing_data[, -which(names(housing_data) == "Price (in rupees)" | names(housing_data) == "log_price")]
Y <- housing_data$log_price
X_matrix <- as.matrix(X)
Y_matrix <- as.matrix(Y)
# Initialize storage
alphas <- seq(0, 1, by = 0.01)
elastic_net <- list()  # A list to store models
best_lambda <- numeric(length(alphas))  # Numeric vector for best lambda values
predicted_prices <- list()  # A list to store predictions
results <- list()  # A list to store data frames with actual and predicted values
rmse <- numeric(length(alphas))   # Numeric vector for RMSE values
mae <- numeric(length(alphas))   # Numeric vector for MAE values
mape=numeric(length(alphas))  # Numeric vector for MAPE values
for (i in seq_along(alphas)) {
alpha=alphas[i]
# Fit elastic net model with alpha
elastic_net[[i]] <- cv.glmnet(X_matrix, Y_matrix, alpha = alpha)
# Store the best lambda value (we choose lambda where MSE is smallest) #lambda.min
best_lambda[i] <- elastic_net[[i]]$lambda.1se
# Predict on the test set using the best lambda
predicted_prices[[i]] <- predict(elastic_net[[i]], newx = X_matrix, s = "lambda.1se")
# Combine actual and predicted values
results[[i]] <- data.frame(Actual = Y_matrix, Predicted = as.vector(predicted_prices[[i]]))
# Compute RMSE, MAE, MAPE
rmse[i] <- sqrt(mean((results[[i]]$Actual - results[[i]]$Predicted)^2))
mae[i] <- mean(abs(results[[i]]$Actual - results[[i]]$Predicted))
mape[i] <- mean(abs((results[[i]]$Actual - results[[i]]$Predicted) / results[[i]]$Actual)) * 100
}
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(glmnet)
housing_data <- read_csv("/Users/chensihan/Documents/GitHub/BIOSTAT625/Data Exploration/final_full_rmna_OneHotEncoded_housing.csv")
set.seed(34)
attach(housing_data)
#transform price into log_price
housing_data$log_price=log(housing_data$`Price (in rupees)`)
X <- housing_data[, -which(names(housing_data) == "Price (in rupees)" | names(housing_data) == "log_price")]
Y <- housing_data$log_price
X_matrix <- as.matrix(X)
Y_matrix <- as.matrix(Y)
# Initialize storage
alphas <- seq(0, 1, by = 0.01)
elastic_net <- list()  # A list to store models
best_lambda <- numeric(length(alphas))  # Numeric vector for best lambda values
predicted_prices <- list()  # A list to store predictions
results <- list()  # A list to store data frames with actual and predicted values
rmse <- numeric(length(alphas))   # Numeric vector for RMSE values
mae <- numeric(length(alphas))   # Numeric vector for MAE values
mape=numeric(length(alphas))  # Numeric vector for MAPE values
for (i in seq_along(alphas)) {
alpha=alphas[i]
# Fit elastic net model with alpha
elastic_net[[i]] <- cv.glmnet(X_matrix, Y_matrix, alpha = alpha)
# Store the best lambda value (we choose lambda where MSE is smallest) #lambda.min
best_lambda[i] <- elastic_net[[i]]$lambda.1se
# Predict on the test set using the best lambda
predicted_prices[[i]] <- predict(elastic_net[[i]], newx = X_matrix, s = "lambda.1se")
# Combine actual and predicted values
results[[i]] <- data.frame(Actual = Y_matrix, Predicted = as.vector(predicted_prices[[i]]))
# Compute RMSE, MAE, MAPE
rmse[i] <- sqrt(mean((results[[i]]$Actual - results[[i]]$Predicted)^2))
mae[i] <- mean(abs(results[[i]]$Actual - results[[i]]$Predicted))
mape[i] <- mean(abs((results[[i]]$Actual - results[[i]]$Predicted) / results[[i]]$Actual)) * 100
}
# Results for RMSE, MAE and MAPE
print(rmse)
which.min(abs(rmse))
print(mae)
which.min(abs(mae))
print(mape)
which.min(abs(mape))
plot(alphas,rmse)
plot(alphas,mape)
plot(alphas, mae)
alphas[6]
fit= cv.glmnet(X_matrix, Y_matrix, alpha = alphas[6])
plot(fit)
# two methods to choose lambda
fit$lambda.1se
fit$lambda.min
# Compute RMSE, MAE, MAPE and R_squared in training dataset
predicted_prices<- predict(fit, newx = X_matrix,s=0.08663284)
# Combine actual and predicted values
results<- data.frame(Actual = Y_matrix, Predicted = as.vector(predicted_prices))
rmse<- sqrt(mean((results$Actual - results$Predicted)^2))
mae<- mean(abs(results$Actual - results$Predicted))
mape<- mean(abs((results$Actual - results$Predicted) / results$Actual)) * 100
rmse
mae
mape
plot(Y_matrix, predicted_prices, xlab = "Actual Prices (natural log)", ylab = "Predicted Prices (natural log)" )
y_mean <- mean(Y_matrix)
SS_total <- sum((Y_matrix - y_mean)^2)
SS_residual <- sum((Y_matrix - predicted_prices)^2)
R_squared <- 1 - (SS_residual / SS_total)
print(R_squared)
# Determine the range of both axes
range_values <- range(c(Y_matrix, predicted_prices))
# Create the plot with the same scale for x and y axes
plot(
Y_matrix, predicted_prices,
xlab = "Actual Prices (natural log)",
ylab = "Predicted Prices (natural log)",
xlim = range_values,
ylim = range_values,
main = "Actual vs Predicted Prices in Dataset(1)"
)
# Optionally, add a 45-degree line for reference
abline(0, 1, col = "red", lty = 2)  # A red dashed line
housing_data2 <- read_csv("/Users/chensihan/Documents/GitHub/BIOSTAT625/Data Exploration/final_rmna_OneHotEncoded_housing.csv")
attach(housing_data2)
#transform price into log_price
housing_data2$log_price=log(housing_data2$`Price (in rupees)`)
X2 <- housing_data2[, -which(names(housing_data2) == "Price (in rupees)" | names(housing_data2) == "log_price")]
Y2 <- housing_data2$log_price
X2_matrix <- as.matrix(X2)
Y2_matrix <- as.matrix(Y2)
# Initialize storage
alphas2 <- seq(0, 1, by = 0.01)
elastic_net2 <- list()  # A list to store models
best_lambda2 <- numeric(length(alphas2))  # Numeric vector for best lambda values
predicted_prices2 <- list()  # A list to store predictions
results2 <- list()  # A list to store data frames with actual and predicted values
rmse2 <- numeric(length(alphas2))   # Numeric vector for RMSE values
mae2 <- numeric(length(alphas2))   # Numeric vector for MAE values
mape2=numeric(length(alphas2))  # Numeric vector for MAPE values
for (i in seq_along(alphas2)) {
alpha2=alphas2[i]
elastic_net2[[i]] <- cv.glmnet(X2_matrix, Y2_matrix, alpha = alpha2)
# Store the best lambda value (we choose lambda where MSE is smallest)
best_lambda2[i] <- elastic_net2[[i]]$lambda.1se
# Predict on the test set using the best lambda
predicted_prices2[[i]] <- predict(elastic_net2[[i]], newx = X2_matrix, s = "lambda.1se")
# Combine actual and predicted values
results2[[i]] <- data.frame(Actual = Y2_matrix, Predicted = as.vector(predicted_prices2[[i]]))
# Compute RMSE, MAE, MAPE
rmse2[i] <- sqrt(mean((results2[[i]]$Actual - results2[[i]]$Predicted)^2))
mae2[i] <- mean(abs(results2[[i]]$Actual - results2[[i]]$Predicted))
mape2[i] <- mean(abs((results2[[i]]$Actual - results2[[i]]$Predicted) / results2[[i]]$Actual)) * 100
}
# Results for RMSE, MAE and MAPE
print(rmse2)
which.min(abs(rmse2))
print(mae2)
which.min(abs(mae2))
print(mape2)
which.min(abs(mape2))
plot(alphas2,rmse2)
plot(alphas2,mape2)
plot(alphas2, mae2)
fit2= cv.glmnet(X2_matrix, Y2_matrix, alpha = 0.05)
plot(fit2)
# two methods to choose lambda
fit2$lambda.1se
fit2$lambda.min
# Compute RMSE, MAE, MAPE and R_squared in training dataset
predicted_prices2<- predict(fit2, newx = X2_matrix,s=0.02591575)
# Combine actual and predicted values
results2<- data.frame(Actual = Y2_matrix, Predicted = as.vector(predicted_prices2))
rmse2<- sqrt(mean((results2$Actual - results2$Predicted)^2))
mae2<- mean(abs(result2s$Actual - results2$Predicted))
View(results2)
# Compute RMSE, MAE, MAPE and R_squared in training dataset
predicted_prices2<- predict(fit2, newx = X2_matrix,s=0.0342591)
# Combine actual and predicted values
results2<- data.frame(Actual = Y2_matrix, Predicted = as.vector(predicted_prices2))
rmse2<- sqrt(mean((results2$Actual - results2$Predicted)^2))
mae2<- mean(abs(results2$Actual - results2$Predicted))
mape2<- mean(abs((results2$Actual - results2$Predicted) / results2$Actual)) * 100
rmse2
mae2
mape2
y2_mean <- mean(Y2_matrix)
SS_total2 <- sum((Y2_matrix - y2_mean)^2)
SS_residual2 <- sum((Y2_matrix - predicted_prices2)^2)
R_squared2 <- 1 - (SS_residual2 / SS_total2)
print(R_squared2)
# Determine the range of both axes
range_values <- range(c(Y2_matrix, predicted_prices2))
# Create the plot with the same scale for x and y axes
plot(
Y2_matrix, predicted_prices2,
xlab = "Actual Prices (natural log)",
ylab = "Predicted Prices (natural log)",
xlim = range_values,
ylim = range_values,
main = "Actual vs Predicted Prices in Dataset(2)"
)
# Optionally, add a 45-degree line for reference
abline(0, 1, col = "red", lty = 2)  # A red dashed line
# Set layout to display 2 plots side by side
par(mfrow = c(1, 2))  # 1 row, 2 columns
# Plot 1
range_values <- range(c(Y_matrix, predicted_prices))
plot(
Y_matrix, predicted_prices,
xlab = "Actual Prices (natural log)",
ylab = "Predicted Prices (natural log)",
xlim = range_values,
ylim = range_values,
main = "Actual vs Predicted Prices in Dataset(1)"
)
abline(0, 1, col = "red", lty = 2)  # A red dashed line
# Plot 2
range_values <- range(c(Y2_matrix, predicted_prices2))
plot(
Y2_matrix, predicted_prices2,
xlab = "Actual Prices (natural log)",
ylab = "Predicted Prices (natural log)",
xlim = range_values,
ylim = range_values,
main = "Actual vs Predicted Prices in Dataset(2)"
)
abline(0, 1, col = "red", lty = 2)  # A red dashed line
# Reset layout to default (1 plot)
par(mfrow = c(1, 1))
# Set layout to display 2 plots side by side
par(mfrow = c(1, 2))  # 1 row, 2 columns
# Plot 1
range_values <- range(c(Y_matrix, predicted_prices))
plot(
Y_matrix, predicted_prices,
xlab = "Actual Prices (natural log)",
ylab = "Predicted Prices (natural log)",
xlim = range_values,
ylim = range_values,
main = "Actual vs Predicted Prices in Dataset(1)"
)
abline(0, 1, col = "red", lty = 2)  # A red dashed line
# Plot 2
plot(
Y2_matrix, predicted_prices2,
xlab = "Actual Prices (natural log)",
ylab = "Predicted Prices (natural log)",
xlim = range_values,
ylim = range_values,
main = "Actual vs Predicted Prices in Dataset(2)"
)
abline(0, 1, col = "red", lty = 2)  # A red dashed line
# Reset layout to default (1 plot)
par(mfrow = c(1, 1))
# Set layout to display 2 plots side by side
par(mfrow = c(1, 2))  # 1 row, 2 columns
# Plot 1
range_values <- range(c(Y_matrix, predicted_prices))
plot(
Y_matrix, predicted_prices,
xlab = "Actual Prices (natural log)",
ylab = "Predicted Prices (natural log)",
xlim = range_values,
ylim = range_values,
main = "Actual vs Predicted Prices in Dataset(1)"
)
abline(0, 1, col = "red", lty = 2)  # A red dashed line
# Plot 2
plot(
Y2_matrix, predicted_prices2,
xlab = "Actual Prices (natural log)",
ylab = "Predicted Prices (natural log)",
xlim = range_values,
ylim = range_values,
main = "Actual vs Predicted Prices in Dataset(2)"
)
abline(0, 1, col = "red", lty = 2)  # A red dashed line
# Reset layout to default (1 plot)
par(mfrow = c(1, 1))
# Set layout to display 2 plots side by side
par(mfrow = c(1, 2))  # 1 row, 2 columns
# Plot 1
range_values <- range(c(Y_matrix, predicted_prices))
plot(
Y_matrix, predicted_prices,
xlab = "Actual Prices (natural log)",
ylab = "Predicted Prices (natural log)",
xlim = range_values,
ylim = range_values,
cex.lab = 0.8,
cex.main = 0.8,
main = "Actual vs Predicted Prices in Dataset(1)"
)
abline(0, 1, col = "red", lty = 2)  # A red dashed line
# Plot 2
plot(
Y2_matrix, predicted_prices2,
xlab = "Actual Prices (natural log)",
ylab = "Predicted Prices (natural log)",
xlim = range_values,
ylim = range_values,
cex.lab = 0.8,
cex.main = 0.8,
main = "Actual vs Predicted Prices in Dataset(2)"
)
abline(0, 1, col = "red", lty = 2)  # A red dashed line
# Reset layout to default (1 plot)
par(mfrow = c(1, 1))
library(knitr)
# Create a data frame
data <- data.frame(
Column1 = c("A", "B", "C"),
Column2 = c(1, 2, 3),
Column3 = c(4.5, 5.6, 6.7)
)
# Generate a three-line table
kable(data, format = "latex", booktabs = TRUE)
